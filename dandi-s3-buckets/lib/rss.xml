<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[kitware]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>kitware</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 07 Nov 2024 16:11:57 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 07 Nov 2024 16:11:57 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[DANDI - Neurosift LLM search integration 2024-11-06]]></title><description><![CDATA[ 
 <br>These notes are being recorded on 2024-11-07 (the day after the meeting took place).<br><br>
<br>Demo <a data-tooltip-position="top" aria-label="Jeremy Magland" data-href="Jeremy Magland" href="Jeremy Magland.html" class="internal-link" target="_self" rel="noopener nofollow">Jeremy's</a> LLM search feature in Neurosift
<br>Discuss whether and how to integrate it into DANDI Archive.
<br><br>Neurosift has an LLM-based search feature that works as follows:<br>
<br>At intervals, Jeremy uses a prebaked LLM prompt to generate descriptive summaries of every Dandiset in the archive, using the metadata and extracted NWB file information as inputs. The output is a Markdown-formatted English text summary description of each Dandiset.
<br>Those summaries are poured into an OpenAI paid service that crunches the text down into a vector embedding space. The resulting vector representations are stored in the cloud.
<br>Neurosift has an LLM search page. On that page, a user can type in descriptions of Dandisets they're looking for in a paper abstract style. (Or, more generally, in any style, but it is optimized for abstracts.) Submitting the search hits the same OpenAI embedding service to create a vector representation of the search terms.
<br>The client downloads the accumulated Dandiset vector embeddings, and frontend logic performs a cosine similarity computation of the search vector against the Dandiset vectors and orders them by similarity.
<br>Those results are shown to the user.
<br>It is pretty neat.<br><br>
<br>Initial idea: when DANDI's "lexical search" executes, also perform the LLM search and show both results in the page.

<br>Roni: doesn't seem like a great idea; lexical and LLM searches have very different use cases


<br>Roni's ideas for integration:

<br>Stage 0: just stick a button in the search bar that links out to Neurosift's search. Then people can use it and we can figure out if they like it, etc.

<br>Would need to attach analytics to the button, and wouldn't really get any other information about their usage (unless Jeremy attaches analytics to Neurosift, which is a tall ask).
<br>Kabi and Jeremy both didn't like this idea. Roni came around and agreed (even though it is near zero cost to implement, the returns are also very low).


<br>Stage 1: create a new, non-public search view (akin to the existing faceted search) where users can put in a query, and it will be POSTed to a new Neurosift endpoint that performs the search described above and simply returns a list of Dandiset IDs. When these results come back to DANDI, we can render the results using our existing components for doing so (public Dandisets list; search results; etc.).
<br>Stage 2: we rearchitect the ideas behind Jeremy's service in a way that integrates with DANDI's existing architecture. In particular, Jeremy's system uses an AWS Lambda function to carry out the query embedding, and performs all other computations in the frontend (including downloading a currently 4MB file containing the Dandiset embeddings). We can dispense with these things using the backend resources DANDI already uses. This would require a deliberate design process, as it would be a major enhancement of the DANDI Archive.


<br><br>
<br>Jeremy: add a backend service that performs the query and returns Dandiset IDs
<br>Roni: after Jeremy completes the above, create an experimental search view in DANDI Archive that uses that service.
]]></description><link>DANDI - Neurosift LLM search integration 2024-11-06.html</link><guid isPermaLink="false">DANDI - Neurosift LLM search integration 2024-11-06.md</guid><pubDate>Thu, 07 Nov 2024 16:06:21 GMT</pubDate></item></channel></rss>